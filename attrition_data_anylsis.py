# -*- coding: utf-8 -*-
"""Attrition_data anylsis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j7SOEaSTOo5WtmiXx0ocIggKx_gl7Uty

# **Employee Attrition Analysis**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ignore harmless warnigns
import warnings
warnings.filterwarnings('ignore')

# formating the notebook
pd.set_option('display.max_columns', None)

data = pd.read_csv("/content/employee_data.csv")

data.head()

data.tail()

data.shape

print(f'the row data is {data.shape[0]} & coloumns is {data.shape[1]}')

#basic valadition

#Data type , data missing value , sample data

data_val = pd.DataFrame({
    'DataTypes' :data.dtypes,
    'MissingValPercentage':round(data.isnull().mean(),2)
})

sample_data = pd.DataFrame(data.head(2))
sample_data = pd.DataFrame(data.head(2).T)

sample_data.rename(columns={0: 'Sample_1', 1: 'Sample_2'}, inplace=True)
data_val=pd.concat([data_val,sample_data],axis=1)
data_val

# Number of numerical and categorical features

num,obj = 0,0
for cols in data.columns:
  if data[cols].dtype != "O":
    num += 1;
  else:
    obj += 1;

print(f'the number are {num} & categories  are {obj}')

print(f'the number of duplicate values are {data[data.duplicated()].shape[0]}' )

for cols in data.columns:
  if data[cols].dtype =="O":
      if data[cols].nunique() == 1:
            print(f'** {cols} has {data[cols].nunique()} unique values. **')
      else:
          print(f'{cols} has {data[cols].nunique()} unique values.')

for cols in data.columns:
    if data[cols].dtype == 'O':
        if data[cols].nunique() == 1:
            print(f'** {cols} has {data[cols].nunique()} unique values. **')
        else:
            print(f'{cols} has {data[cols].nunique()} unique values.')

for cols in data.columns:
  if data[cols].dtype!= 0:
    if data[cols].nunique() in [1, data.shape[0]]:
      print(f'**{cols} has {data[cols].nunique()} unique values **')
    else:
      print(f'{cols} has {data[cols].nunique()} unique values ')

print(f'number of coloumns before data cleaning',data.shape[1])

data.drop(columns=['EmployeeCount', 'StandardHours', 'Over18', 'EmployeeNumber'], axis=1, inplace=True)

print(f'number of coloumns After data cleaning',data.shape[1])

#Analysing the dependent / target column

data['Attrition'].value_counts(normalize=True)*100,2

round(data['Attrition'].value_counts(normalize=True)*100,2)

# sns.countplot(...):

# Plots the count of each category (e.g., "Yes" and "No") in "Attrition".
# x='Attrition':

# Specifies that "Attrition" is on the x-axis.
# data=data:

# Uses the data DataFrame.
# order=data['Attrition'].value_counts().index:

# Orders the bars based on the count (highest first).

# Plotting the graph for the target data

ax = sns.countplot(x='Attrition', data=data,
                   order=data["Attrition"].value_counts().index)

plt.show()

# Plotting the graph for the target data

ax = sns.countplot(x='Attrition', data=data,
                   order=data["Attrition"].value_counts().index,hue="Attrition")
ax.bar_label(ax.containers[0])
plt.show()



"""# Univariate **Analysis**

data.select_dtypes('number'):

Selects only numerical columns (int64, float64).
.columns:

Extracts column names.
list(...):

Converts the column names into a list.
ðŸ”¹ num_lst now contains all numerical column names.
"""

num_lst = list(data.select_dtypes('number').columns)
cat_lst = list(data.select_dtypes('object').columns)

for cols in num_lst:
    if data[cols].nunique() > 10:  # Check if unique values are greater than 10
        sns.kdeplot(data[cols], fill=True)  # Kernel Density Estimation (KDE) plot
        plt.show()  # Display the plot

num_lst = list(data.select_dtypes('number').columns)
cat_lst = list(data.select_dtypes('object').columns)

for cols in num_lst:
    if data[cols].nunique() > 10:
        sns.kdeplot(data[cols], fill=True)
        plt.show()
        sns.boxplot(data[cols], orient='h')
        plt.show()

# appending the categorical data from numerical columns into cat_lst

for cols in num_lst:
    if data[cols].nunique() <= 10:
        cat_lst.append(cols)

print(cat_lst)

# count plot for categorical data
for cols in cat_lst:
    ax = sns.countplot(x=data[cols])
    ax.bar_label(ax.containers[0])
    plt.xticks(rotation=90)
    plt.show()

